'''
Approximate square root.  CIS 210 F17 Project 2-1.

Author: [Solution]

Credits: N/A

Approximate square root with iterative algorithm; compare
to Python math library sqrt function and report results.

Practice:
-designing a Python program
-good programming style
-Python user-defined functions (parms, docstring, return)
-numeric data type and operators
-Python expressions
-variable assignment
-print function

-other built-in functions (abs, round, range)
-iteration (use Python for to implement a repeat loop)
-importing a module
-return v. print

'''
import math
import doctest

def mysqrt(n, k):
    '''(integer, integer) -> float

    Generates an approximate square root of num,
    a positive integer, via an iterative process
    that runs k times. 

    The approximate square root is returned.

    >>> mysqrt(25, 5)
    5.000023178253949
    >>> mysqrt(25, 10)
    5.0
    >>> mysqrt(100, 10)
    10.0
    >>> mysqrt(625, 10)
    25.0
    >>> mysqrt(10000, 8)
    101.20218365353946
    >>> mysqrt(10000, 10)
    100.00000025490743
    >>> mysqrt(10000, 11)
    100.0
 
    '''
    # iterative process calculates
    # approximate square root

    assert n > 0
    assert isinstance(n, int)
    
    x = 1
    for ctr in range(k):
        x = .5 * (x + n/x)
        #print(x)

    return x

def sqrt_compare(num, iterations):
    '''(integer, integer) -> None

    Calls function mysqrt to generate an approximate
    square root for num, a positive integer.

    This result is compared to the square root
    generated by the Python math library sqrt
    function.

    The difference is reported as a %.

    None value is returned.

    >>> sqrt_compare(25, 5)
    For  25 using 5 iterations:
    mysqrt value is:  5.000023178253949
    math lib sqrt value is:  5.0
    This is a 0.0 percent error.
    
    >>> sqrt_compare(1000, 10)
    For  1000 using 10 iterations:
    mysqrt value is:  31.622776601683793
    math lib sqrt value is:  31.622776601683793
    This is a 0.0 percent error.
    
    >>> sqrt_compare(10000, 8)
    For  10000 using 8 iterations:
    mysqrt value is:  101.20218365353946
    math lib sqrt value is:  100.0
    This is a 1.2 percent error.    
    '''
    sval1 = mysqrt(num, iterations)
    sval2 = math.sqrt(num)

    # determine the error compared to math module sqrt
    diff = abs(sval2 - sval1)
    err = (diff / sval2) * 100 

    # format for reporting
    err = round(err, 2)
    
    print('For ', num, 'using', iterations, 'iterations:')
    print('mysqrt value is: ', sval1)
    print('math lib sqrt value is: ', sval2)
    print('This is a', err, 'percent error.')

    return None

print(mysqrt(25, 5))
print(mysqrt(25, 10))
print(mysqrt(100, 10))
print(mysqrt(625, 10))
print(mysqrt(10000, 8))
print(mysqrt(10000, 10))
print(mysqrt(10000,11))
print()

sqrt_compare(25, 5)
sqrt_compare(10000, 8)

